% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gh_token.R
\name{gh_token}
\alias{gh_token}
\title{Return the local user's GitHub Personal Access Token (PAT)}
\usage{
gh_token(api_url = NULL)
}
\arguments{
\item{api_url}{GitHub API URL. Defaults to the \code{GITHUB_API_URL} environment
variable, if set, and otherwise to \url{https://api.github.com}.}
}
\value{
A string of 40 hexadecimal digits, if a PAT is found, or the empty
string, otherwise. For convenience, the return value has an S3 class in
order to ensure that simple printing strategies don't reveal the entire
PAT.
}
\description{
If gh can find a personal access token (PAT) via \code{gh_token()}, it includes
the PAT in its requests. Some requests succeed without a PAT, but many
require a PAT to prove the request is authorized by a specific GitHub user. A
PAT also helps with rate limiting. If your gh use is more than casual, you
want a PAT.

gh uses the gitcreds package to find a PAT on the system. If you use
git from the command line or with a GUI, then chances are that you already
have a PAT and gitcreds and gh can re-use it. Call the
\code{\link[gitcreds:gitcreds_get]{gitcreds::gitcreds_get()}} function to see if this is the case. This
function errors if it cannot find any PAT.

gh calls \code{\link[gitcreds:gitcreds_get]{gitcreds::gitcreds_get()}} with the \code{api_url}.

To add a GitHub PAT, create one online at (see
https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token),
and they use the \code{\link[gitcreds:gitcreds_get]{gitcreds::gitcreds_set()}} to add it to your git
credential store.
}
\examples{
\dontrun{
gh_token()

format(gh_token())

str(gh_token())
}
}
