% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gh_token.R
\name{gh_token}
\alias{gh_token}
\title{Return the local user's GitHub Personal Access Token (PAT)}
\usage{
gh_token(api_url = NULL)
}
\arguments{
\item{api_url}{Github API url. Defaults to \code{GITHUB_API_URL}
environment variable if set, otherwise \url{https://api.github.com}.}
}
\value{
A string of 40 hexadecimal digits, if token is available, or the
empty string, otherwise. For convenience, the return value has an S3 class
in order to ensure that simple printing strategies don't reveal the entire
token.
}
\description{
You can read more about PATs here:
\url{https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token}
and you can access your PATs here (if logged in to GitHub):
\url{https://github.com/settings/tokens}.
}
\details{
Set the \code{GITHUB_PAT} environment variable to avoid having to include
your PAT in the code. If you work with multiple GitHub deployments,
e.g. via GitHub Enterprise, then read 'PATs for GitHub Enterprise' below.

If you want a more secure solution than putting authentication tokens
into environment variables, read 'Storing PATs in the system keyring'
below.
}
\section{PATs for GitHub Enterprise}{


gh lets you use different PATs for different GitHub API URLs, by looking
for the PAT in an URL-specific environment variable first. The helper
\code{\link[=slugify_url]{slugify_url()}} computes a suffix from the API URL like so:
\itemize{
\item Extract the host name, i.e. drop both the protocol and any path
\item Substitute "github.com" for "api.github.com"
\item Replace special characters with underscores
\item Convert to ALL CAPS
}

This suffix is then added to \code{GITHUB_PAT_} to form the name of an environment
variable. It's probably easiest to just look at some examples.\if{html}{\out{<div class="r">}}\preformatted{# both give same result
slugify_url("https://api.github.com")
}\if{html}{\out{</div>}}\preformatted{## [1] "GITHUB_COM"
}\if{html}{\out{<div class="r">}}\preformatted{slugify_url("https://github.com")
}\if{html}{\out{</div>}}\preformatted{## [1] "GITHUB_COM"
}\if{html}{\out{<div class="r">}}\preformatted{# an instance of GitHub Enterprise
# both give same result
slugify_url("https://github.acme.com")
}\if{html}{\out{</div>}}\preformatted{## [1] "GITHUB_ACME_COM"
}\if{html}{\out{<div class="r">}}\preformatted{slugify_url("https://github.acme.com/api/v3")
}\if{html}{\out{</div>}}\preformatted{## [1] "GITHUB_ACME_COM"
}

This implies that, for the default API URL \url{https://api.github.com}, these
env vars are consulted, in this order:
\itemize{
\item \code{GITHUB_PAT_GITHUB_COM}
\item \code{GTIHUB_PAT}
\item \code{GITHUB_TOKEN}
}

You can customize the default API URL via the \code{GITHUB_API_URL} environment
variable.
}

\section{Storing PATs in the system keyring}{


gh supports storing your PAT in the system keyring, on Windows, macOS
and Linux, using the keyring package. To turn on keyring support, you
need to set the \code{GH_KEYRING} environment variables to \code{true}, e.g. in your
\code{.Renviron} file.

If keyring support is turned on, then for each PAT environment variable,
gh first checks for it via \code{Sys.getenv()} and, if unset, gh then checks
whether such a key exists in the system keyring and, if yes, it uses
the associated value as the PAT. I.e. without a custom \code{GITHUB_API_URL}
variable, gh checks the \code{GITHUB_PAT_GITHUB_COM} env var first, then
checks for that key in the keyring, then moves on to do same with
\code{GITHUB_PAT} and perhaps \code{GITHUB_TOKEN}. The keyring check looks like this:\if{html}{\out{<div class="r">}}\preformatted{keyring::key_get("GITHUB_PAT_GITHUB_COM")
}\if{html}{\out{</div>}}

and it uses the default keyring backend and the default keyring within
that backend. See \code{\link[keyring:backends]{keyring::default_backend()}} for details and changing
these defaults.

If the selected keyring is locked, and the session is interactive,
then gh will try to unlock it. If the keyring is locked, and the session
is not interactive, then gh will not use the keyring. Note that some
keyring backends cannot be locked (e.g. the one that uses environment
variables).

On some OSes, e.g. typically on macOS, you need to allow R to access the
system keyring. You can allow this separately for each access, or for
all future accesses, until you update or re-install R. You typically
need to give access to each R GUI (e.g. RStudio) and the command line
R program separately.

To store your PAT on the keyring run\if{html}{\out{<div class="r">}}\preformatted{keyring::key_set("GITHUB_PAT")
}\if{html}{\out{</div>}}
}

\examples{
\dontrun{
gh_token()

format(gh_token())

str(gh_token())
}
}
\seealso{
\code{\link[=slugify_url]{slugify_url()}} for computing the environment variables that
gh uses to search for API URL specific PATs.
}
